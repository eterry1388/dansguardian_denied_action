{"name":"Dansguardian Denied Action","tagline":"Triggers a custom action when a site is blocked/denied. Works by monitoring the access log of Dansguardian or e2guardian.","body":"# Dansguardian Denied Action\r\n\r\n[![Build Status](https://travis-ci.org/eterry1388/dansguardian_denied_action.svg?branch=master)](https://travis-ci.org/eterry1388/dansguardian_denied_action)\r\n[![Gem Version](https://badge.fury.io/rb/dansguardian_denied_action.svg)](https://badge.fury.io/rb/dansguardian_denied_action)\r\n![](http://ruby-gem-downloads-badge.herokuapp.com/dansguardian_denied_action?type=total)\r\n[![Coverage Status](https://coveralls.io/repos/eterry1388/dansguardian_denied_action/badge.svg?branch=master&service=github)](https://coveralls.io/github/eterry1388/dansguardian_denied_action?branch=master)\r\n[![Inline docs](http://inch-ci.org/github/eterry1388/dansguardian_denied_action.svg?branch=master)](http://inch-ci.org/github/eterry1388/dansguardian_denied_action)\r\n[![Dependency Status](https://gemnasium.com/eterry1388/dansguardian_denied_action.svg)](https://gemnasium.com/eterry1388/dansguardian_denied_action)\r\n\r\nTriggers a custom action when a site is blocked/denied. Works by monitoring the access log of Dansguardian or e2guardian.\r\n\r\n[DansGuardian](http://dansguardian.org) is an award winning Open Source web content filter. It filters the actual content of pages based on many methods including phrase matching, PICS filtering and URL filtering. It does not purely filter based on a banned list of sites like lesser totally commercial filters.\r\n\r\n[e2guardian](http://e2guardian.org) is a fork of Dansguardian Project with many improvements and bug fixes, e2guardian is a web content filtering proxy that works in conjunction with another caching proxy such as Squid.\r\n\r\n## Installation\r\n\r\n```bash\r\ngem install dansguardian_denied_action\r\n```\r\n\r\n## Usage\r\n\r\n`dansguardian_denied_action` follows the Observer pattern.  See more information from the [Ruby Rdocs](http://ruby-doc.org/stdlib-2.1.0/libdoc/observer/rdoc/Observable.html).  You can add as many observers as you'd like that are triggered when a denied action log is added to the access log.  An observer is an instance of a class that has an `update` method defined.  The `update` method is called whenever the observer is notified (when there is a denied log).\r\n\r\nCurrently only log file format 2 (CSV-style format) is supported.  Please contribute if you'd like more formats supported.  Make sure your `/etc/dansguardian/dansguardian.conf` has the `logfileformat` set as `2`.  For example:\r\n\r\n```bash\r\n# Log File Format\r\n# 1 = DansGuardian format (space delimited)\r\n# 2 = CSV-style format\r\n# 3 = Squid Log File Format\r\n# 4 = Tab delimited\r\n# 5 = Protex format\r\n# 6 = Protex format with server field blanked\r\n\r\nlogfileformat = 2\r\n```\r\n\r\n### Example\r\n\r\n```ruby\r\nrequire 'dansguardian_denied_action'\r\n\r\n# An observer class that outputs to the screen\r\nclass OutputToScreen\r\n  def update( log )\r\n    puts \"IP:       #{log.requesting_ip}\"\r\n    puts \"URL:      #{log.requested_url}\"\r\n    puts \"Category: #{log.category}\"\r\n  end\r\nend\r\n\r\n# An observer class that sends an email\r\nclass SendEmail\r\n  def update( log )\r\n    message = \"Denied page accessed!\\n\\n\"\r\n    message << \"IP:       #{log.requesting_ip}\\n\"\r\n    message << \"URL:      #{log.requested_url}\\n\"\r\n    message << \"Category: #{log.category}\"\r\n    `echo \"#{message}\" | mail -s \"Denied page\" admin@example.com`\r\n  end\r\nend\r\n\r\n# Initialize the access log class and select the format of dansguardian\r\n@access_log = DansguardianDeniedAction::AccessLog.new( format: DansguardianDeniedAction::LOG_FORMAT_CSV )\r\n\r\n# Add as many observers as you'd like\r\n@access_log.add_observer( OutputToScreen.new )\r\n@access_log.add_observer( SendEmail.new )\r\n\r\n# Call the monitor method to monitor the log and notify\r\n# your observers when a blocked page is accessed\r\n@access_log.monitor\r\n```\r\n\r\n## Customization\r\n\r\nIf you want to trigger your observers on an action other than `DENIED`, you can specify one like so:\r\n\r\n```ruby\r\n@access_log = DansguardianDeniedAction::AccessLog.new(\r\n  format: DansguardianDeniedAction::LOG_FORMAT_CSV,\r\n  action: 'INFECTED'\r\n)\r\n```\r\n\r\n### e2guardian\r\n\r\nIf you are using e2guardian rather than dansguardian, you want to point to the correct log path.  For example:\r\n\r\n```ruby\r\n@access_log = DansguardianDeniedAction::AccessLog.new(\r\n  format: DansguardianDeniedAction::LOG_FORMAT_CSV,\r\n  path: '/var/log/e2guardian/access.log'\r\n)\r\n```\r\n\r\n## Log methods\r\n\r\nYour observer class which as the `update` method defined accepts a `log` as it's sole argument.  This is an instance of `DansguardianDeniedAction::Log`.  The accessor methods available include:\r\n\r\n* raw\r\n* date_time\r\n* requesting_user\r\n* requesting_ip\r\n* requested_url\r\n* actions\r\n* reason\r\n* subreason\r\n* method\r\n* size\r\n* weight\r\n* category\r\n* filter_group_number\r\n* http_code\r\n* mime_type\r\n* client_name\r\n* filter_group_name\r\n* user_agent\r\n\r\nMore information on the data within these accessor methods can be found on the [DansGuardian Documentation Wiki](http://contentfilter.futuragts.com/wiki/doku.php?id=the_access.log_files).\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/eterry1388/dansguardian_denied_action.  Please make sure\r\nall tests pass before making a pull request.  The tests require an OS with a `/tmp` directory.\r\n\r\n### How to run system tests\r\n\r\n```bash\r\nrspec\r\n```\r\n\r\nThe output should look something like this:\r\n\r\n```\r\nDansguardianDeniedAction\r\n  DansguardianDeniedAction::AccessLog\r\n    Updates observer for every new log\r\n  logs\r\n    DansguardianDeniedAction::CsvLog\r\n      raw\r\n        should eq \"\\\"2016.1.8 19:46:10\\\",\\\"fred\\\",\\\"192.168.0.1\\\",\\\"http://example.com\\\",\\\"*DENIED* Banned site: example.com\\\",\\\"GET\\\",\\\"3804\\\",\\\"0\\\",\\\"Pornography\\\",\\\"1\\\",\\\"403\\\",\\\"text/html\\\",\\\"fred.example.com\\\",\\\"group-name\\\",\\\"Mozilla/5.0\\\"\"\r\n      date_time\r\n        should eq \"2016.1.8 19:46:10\"\r\n      requesting_user\r\n        should eq \"fred\"\r\n      requesting_ip\r\n        should eq \"192.168.0.1\"\r\n      requested_url\r\n        should eq \"http://example.com\"\r\n      actions\r\n        should eq \"DENIED\"\r\n      reason\r\n        should eq \"Banned site: example.com\"\r\n      subreason\r\n        should eq \"Banned site: example.com\"\r\n      method\r\n        should eq \"GET\"\r\n      size\r\n        should eq 3804\r\n      weight\r\n        should eq 0\r\n      category\r\n        should eq \"Pornography\"\r\n      filter_group_number\r\n        should eq 1\r\n      http_code\r\n        should eq 403\r\n      mime_type\r\n        should eq \"text/html\"\r\n      client_name\r\n        should eq \"fred.example.com\"\r\n      filter_group_name\r\n        should eq \"group-name\"\r\n      user_agent\r\n        should eq \"Mozilla/5.0\"\r\n\r\nFinished in 4.03 seconds (files took 0.10009 seconds to load)\r\n19 examples, 0 failures\r\n```\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}